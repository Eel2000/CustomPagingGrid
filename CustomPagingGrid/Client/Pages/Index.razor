@page "/"

@inject ServerService server

<PageTitle>Index</PageTitle>

@*<TelerikGrid TItem="@Value"
    OnRead="@ReadItems"
    Pageable="true" PageSize="10"
    FilterMode="@Telerik.Blazor.GridFilterMode.FilterMenu"
    Resizable="true">
    <GridColumns>
    <GridColumn Field=@nameof(Value.UserName) Title="Username" FieldType="typeof(string)" />
    <GridColumn Field=@nameof(Value.FirstName) Title="Firstname" FieldType="typeof(string)" />
    <GridColumn Field=@nameof(Value.LastName) Title="Lastname" FieldType="typeof(string)" />
    <GridColumn Field=@nameof(Value.MiddleName) Title="Middlename" FieldType="typeof(string)" />
    <GridColumn Field=@nameof(Value.Gender) Title="Gender" FieldType="typeof(string)" />
    <GridColumn Field=@nameof(Value.Age) Title="Age" FieldType="typeof(int)" />
    <GridColumn Field=@nameof(Value.FavoriteFeature) Title="Favorite-feature" FieldType="typeof(string)" />
    </GridColumns>
    </TelerikGrid>*@
<b />
<b />
<h1>Dynamic Grid below</h1>
<div class="pb-2">
    <button class="btn btn-primary" @onclick="(()=>FetchDifferentData())">Display new Data</button>
    <button class="btn btn-warning" @onclick="(()=>FetchOldData())">Display old data</button>
</div>
@*<table class="table">
    <thead>
    <tr>
    @foreach (var p in GetValues.First().GetType().GetProperties())
    {
    <th>@p.Name</th>
    }
    </tr>
    </thead>
    <tbody>
    @foreach (var item in GetValues)
    {
    <tr>
    @foreach (var p in item.GetType().GetProperties())
    {
    <td>@p.GetValue(item)</td>
    }
    </tr>
    }
    </tbody>
    </table>*@

<b />
<b />
@if (GetValues.Any())
{

    <TelerikGrid Data="GetValues" Sortable=true Pageable=true FilterMode="@Telerik.Blazor.GridFilterMode.FilterMenu">
        <GridColumns>
            @foreach (var p in GetValues.First().GetType().GetProperties())
        {
            <GridColumn Field="@p.Name" Title="@p.Name" FieldType="p.PropertyType" />
        }
    </GridColumns>
</TelerikGrid>
}


@code {
    List<Object> GetValues = new List<Object>();

    protected override async Task OnInitializedAsync()
    {
        var data = await server.GetDataAsync(10, 1);
        if (data is not null)
        {
            GetValues.AddRange(data.Value);
        }
    }

    protected async Task ReadItems(GridReadEventArgs args)
    {
        Console.WriteLine("data requested: " + args.Request);

        //this is a basic imlementation of custom paging of the grid
        DataEnvelop DataResult = await FetchPagedData(args.Request.Page, args.Request.PageSize, args.Request.Sorts);

        //use the current page of data and the total amount of items in the data source that are returned from the service
        args.Data = DataResult.Value;
        args.Total = DataResult.OdataCount;
    }

    private void Din()
    {
        var list = new List<object>();
        foreach (var item in list)
        {
            var type = item.GetType().GetProperties();
            foreach (var p in type)
            {
                var v = p.GetValue(item);

                var name = p.Name;
            }

        }
    }

    public async Task<DataEnvelop> FetchPagedData(int pageNumber, int pageSize, IList<Telerik.DataSource.SortDescriptor> sorts = null)
    {
        var data = await server.GetDataAsync(pageSize, pageNumber);
        if (data is not null)
        {
            GetValues.AddRange(data.Value);
            return data;
        }

        return new DataEnvelop();//return an empty object.
    }

    public async Task FetchDifferentData()
    {
        var response = await server.GetProductsAsync();
        GetValues.Clear();//empty the list first
        await Task.Delay(1000);
        GetValues = new List<object>(response);
    }

    public async Task FetchOldData()
    {
        var data = await server.GetDataAsync(10, 1);
        if (data is not null)
        {
            GetValues.Clear();//empty the list first
            await Task.Delay(1000);
            GetValues = new List<object>(data.Value);
        }
    }
}
