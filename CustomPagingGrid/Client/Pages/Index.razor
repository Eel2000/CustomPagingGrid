@page "/"

@using Telerik.DataSource.Extensions;
@using Telerik.Blazor.Extensions;

@inject ServerService server

<PageTitle>Index</PageTitle>

<TelerikGrid TItem="@OValue"
             OnRead="@ReadItems"
             Pageable="true" PageSize="10"
             Sortable="true"
             Resizable="true"
             Navigable="true">
    <GridColumns>
        <GridColumn Field=@nameof(OValue.UserName) Title="Username" FieldType="typeof(string)" />
        <GridColumn Field=@nameof(OValue.FirstName) Title="Firstname" FieldType="typeof(string)" />
        <GridColumn Field=@nameof(OValue.LastName) Title="Lastname" FieldType="typeof(string)" />
        <GridColumn Field=@nameof(OValue.MiddleName) Title="Middlename" FieldType="typeof(string)" />
        <GridColumn Field=@nameof(OValue.Gender) Title="Gender" FieldType="typeof(string)" />
        <GridColumn Field=@nameof(OValue.Age) Title="Age" FieldType="typeof(int)" />
        <GridColumn Field=@nameof(OValue.FavoriteFeature) Title="Favorite-feature" FieldType="typeof(string)" />
    </GridColumns>
</TelerikGrid>


@code {
    List<Object> GetValues = new List<Object>();

    protected override async Task OnInitializedAsync()
    {
        var data = await server.GetDataAsync(10, 1);
        if (data is not null)
        {
            GetValues.AddRange(data.Value);
        }
    }

    protected async Task ReadItems(GridReadEventArgs args)
    {
        Console.WriteLine("data requested: " + args.Request);

        var filter = args.Request.ToODataString();
        //this is a basic imlementation of custom paging of the grid
        DataEnvelop DataResult = await FetchPagedData(args.Request.Page, args.Request.PageSize, filter);

        //use the current page of data and the total amount of items in the data source that are returned from the service
        args.Data = DataResult.Value;
        args.Total = DataResult.OdataCount;
    }

    private void Din()
    {
        var list = new List<object>();
        foreach (var item in list)
        {
            var type = item.GetType().GetProperties();
            foreach (var p in type)
            {
                var v = p.GetValue(item);

                var name = p.Name;
            }

        }
    }

    public async Task<DataEnvelop> FetchPagedData(int pageNumber, int pageSize, string filter)
    {
        var data = await server.GetDataAsync(Util.FormatQueryString(filter, pageNumber));
        if (data is not null)
        {
            GetValues.AddRange(data.Value);
            return data;
        }

        return new DataEnvelop();//return an empty object.
    }

}
